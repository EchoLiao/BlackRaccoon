{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"IOS FTP Client Code","name":"Blackraccoon","google":"","body":"## General Notes\r\n\r\nBlackRaccoon is a collection of routines used to act as an FTP client. It was specifically\r\ndesigned to work correctly under ARC and to \"fix\" a leak in the listing of directories.\r\n\r\nWith BlackRaccoon you can:\r\n\r\n*\tDownload a file\r\n*\tUpload a file\r\n*\tDelete a file\r\n*\tCreate a directory\r\n*\tDelete a directory\r\n*\tList a directory\r\n\r\nA function to queue requests has been left in the code, but has not been tested. As this\r\nis not a normal FTP function, the user should assume it is deprecated and will be removed\r\nfrom future releases.\r\n\r\nAs with WhiteRaccoon, the user needs to assure that the **CFNetwork** framework has been\r\nadded to the project.\r\n\r\n### License\r\n\r\nLicense is the MIT License. Basically means you can use as you wish just keep the copyright\r\nnotice in the source code.\r\n\r\n### Differences Between WhiteRaccoon and BlackRaccoon\r\n\r\nBlackRaccoon works correctly with ARC. A lot of time and effort went in to assure there\r\nwere no leaks.\r\n\r\nBlackRaccoon, unlike WhiteRaccoon, breaks up files by objects. This is for this author's\r\nconvenience. If you wish to combine them again, feel free.\r\n\r\nBlackRaccoon has been tested with an unencrypted FTP server. However, it has NOT been\r\ntested with all manner of usernames and passwords.\r\n\r\nAdded helper function *initWithDelegate* to major classes.\r\n\r\nAll FTP operations will either call RequestCompleted for a positive response or\r\nRequestFailed if it is a negative response.\r\n\r\n\r\n### Usage\r\n\r\nThe following code assumes the following:\r\n\r\n\t@interface myclass : NSObject <BRRequestDelegate>\r\n\t{\r\n\t\tBRRequestCreateDirectory *createDir;\r\n\t\tBRRequestDelete * deleteDir;\r\n\t\tBRRequestListDirectory *listDir;\r\n\t\t\r\n\t\tBRRequestDownload *downloadFile;\r\n\t\tBRRequestUpload *uploadFile;\r\n\t\tBRRequestDelete *deleteFile;\r\n\t}\r\n\r\n\r\n\r\n#### Create Directory\r\n\r\n\t- (IBAction) createDirectory:(id)sender\r\n\t{\r\n    \tcreateDir = [BRRequestCreateDirectory initWithDelegate: self];\r\n\t\t\t\t\r\n\t\tcreateDir.path = @\"/home/test/yourdirectory/\";\r\n\t\t\r\n\t\tcreateDir.hostname = @\"192.168.1.5\";\r\n\t\tcreateDir.username = @\"yourusername\";\r\n\t\tcreateDir.password = @\"yourpassword\";\r\n\t\t\r\n\t\t//we start the request\r\n\t\t[createDir start];\r\n\t}\r\n\r\n#### Delete Directory\r\n\r\n\t- (IBAction) deleteDirectory:(id)sender\r\n\t{\r\n\t\tdeleteDir = [BRRequestDelete initWithDelegate: self];\r\n\t\t\t\t\r\n\t\tdeleteDir.path = @\"/home/test/yourdirectory/\";\r\n\t\t\r\n\t\tdeleteDir.hostname = @\"192.168.1.5\";\r\n\t\tdeleteDir.username = @\"yourusername\";\r\n\t\tdeleteDir.password = @\"yourpassword\";\r\n\t\t\r\n\t\t//we start the request\r\n\t\t[deleteDir start];\r\n\t}\r\n\r\n#### List Directory\r\n\r\n\t- (IBAction) listDirectory:(id)sender\r\n\t{\r\n\t\tlistDir = [BRRequestListDirectory initWithDelegate: self];\r\n\t\t\t\r\n\t\tlistDir.path = @\"/home/test/yourdirectory/\";\r\n\t\t\r\n\t\tlistDir.hostname = @\"192.168.1.5\";\r\n\t\tlistDir.username = @\"yourusername\";\r\n\t\tlistDir.password = @\"yourpassword\";\r\n\t\t\r\n\t\t[listDir start];\r\n\t}\r\n\r\n#### Download a File\r\n\r\n\t- (IBAction) downloadFile :(id)sender\r\n\t{\r\n\t\tdownloadFile = [BRRequestDownload initWithDelegate: self];\r\n\t\t\r\n\t\tdownloadFile.path = @\"/home/test/yourfile\";\r\n\t\t\r\n\t\t//for anonymous login just leave the username and password nil\r\n\t\tdownloadFile.hostname = @\"192.168.1.5\";\r\n\t\tdownloadFile.username = @\"yourusername\";\r\n\t\tdownloadFile.password = @\"yourpassword\";\r\n\t\t\r\n\t\t//we start the request\r\n\t\t[downloadFile start];\r\n\t}\r\n\r\n#### Upload a File\r\n\r\n\t- (IBAction) uploadFile :(id)sender\r\n\t{\r\n\t\t//----- get the file to upload as an NSData object\r\n\t\tNSString *applicationDocumentsDir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];\r\n\t\tNSString *filepath = [NSString stringWithFormat: @\"%@/%@\", applicationDocumentsDir, @\"image.jpg\"];\r\n\t\tNSData *dataToUpload = [NSData dataWithContentsOfFile: filepath];\r\n\t\t\r\n\t\tuploadFile = [BRRequestUpload initWithDelegate: self];\r\n\t\t\r\n\t\tuploadFile.sentData = dataToUpload;\r\n\t\t\r\n\t\tuploadFile.path = @\"/home/test/yourfile\";\r\n\t\t\r\n\t\t//for anonymous login just leave the username and password nil\r\n\t\tuploadFile.hostname = @\"192.168.1.5\";\r\n\t\tuploadFile.username = @\"yourusername\";\r\n\t\tuploadFile.password = @\"yourpassword\";\r\n\t\t\r\n\t\t//we start the request\r\n\t\t[uploadFile start];\r\n\t}\r\n\r\n#### Delete a File\r\n\r\n\t- (IBAction) deleteFile: (id) sender\r\n\t{\r\n\t\tdeleteFile = [BRRequestDelete initWithDelegate: self];\r\n\t\t\r\n\t\tdeleteFile.path = @\"/home/test/yourfile\";\r\n\t\t\r\n\t\t//----- for anonymous login just leave the username and password nil\r\n\t\tdeleteFile.hostname = @\"192.168.1.5\";\r\n\t\tdeleteFile.username = @\"yourusername\";\r\n\t\tdeleteFile.password = @\"yourpassword\";\r\n\t\t\r\n\t\t//----- we start the request\r\n\t\t[deleteFile start];\r\n\t}\r\n\r\n#### Delegate callback to determine if something should be overwritten\r\n\r\n\t-(BOOL) shouldOverwriteFileWithRequest: (BRRequest *) request\r\n\t{\r\n\t\t//----- set this as appropriate if you want the file to be overwritten\r\n\t\tif (request == uploadFile)\r\n\t\t{\r\n\t\t\t//----- if uploading a file, we set it to YES\r\n\t\t\treturn YES;\r\n\t\t}\r\n\t\t\r\n\t\t//----- anything else (directories, etc) we set to NO\r\n\t\treturn NO;\r\n\t}\r\n\r\n#### Request Completed\r\n\r\n\t-(void) requestCompleted: (BRRequest *) request\r\n\t{\r\n\t\t//----- handle Create Directory\r\n\t\tif (request == createDir)\r\n\t\t{\r\n\t\t\tNSLog(@\"%@ completed!\", request);\r\n\t\t\t\r\n\t\t\tcreateDir = nil;\r\n\t\t}\r\n\t\t\r\n\t\t//----- handle Delete Directory\r\n\t\tif (request == deleteDir)\r\n\t\t{\r\n\t\t\tNSLog(@\"%@ completed!\", request);\r\n\t\t\t\r\n\t\t\tdeleteDir = nil;\r\n\t\t}\r\n\t\t\r\n\t\t//----- handle List Directory\r\n\t\tif (request == listDir)\r\n\t\t{\r\n\t\t\t//----- called after 'request' is completed successfully\r\n\t\t\tNSLog(@\"%@ completed!\", request);\r\n\t\t\t\r\n\t\t\t//----- we print each of the file names\r\n\t\t\tfor (NSDictionary *file in listDir.filesInfo) \r\n\t\t\t{\r\n\t\t\t\tNSLog(@\"%@\", [file objectForKey: (id) kCFFTPResourceName]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlogview.text = [NSString stringWithFormat: @\"%@\\n\", logview.text];\r\n\t\t\t[logview scrollRangeToVisible: NSMakeRange([logview.text length] - 1, 1)];\r\n\t\t\t\t\t\t\r\n\t\t\tlistDir = nil;\r\n\t\t}\r\n\t\t\r\n\t\t//----- handle Download File\r\n\t\tif (request == downloadFile)\r\n\t\t{\r\n\t\t\t//called after 'request' is completed successfully\r\n\t\t\tNSLog(@\"%@ completed!\", request);\r\n\t\t\t\r\n\t\t\tNSData *data = downloadFile.receivedData;\r\n\t\t\t\r\n\t\t\t//----- save the NSData as a file object\r\n\t\t\tNSError *error;\r\n\t\t\tNSString *applicationDocumentsDir = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];\r\n\t\t\tNSString *filepath = [NSString stringWithFormat: @\"%@/%@\", applicationDocumentsDir, @\"image.jpg\"];\r\n\t\t\t[data writeToFile: filepath options: NSDataWritingFileProtectionNone error: &error];\r\n\t\t\t\r\n\t\t\tdownloadFile = nil;\r\n\t\t}\r\n\t\t\r\n\t\tif (request == uploadFile)\r\n\t\t{\r\n\t\t\tNSLog(@\"%@ completed!\", request);\r\n\t\t\tuploadFile = nil;\r\n\t\t}\r\n\t\t\r\n\t\tif (request == deleteFile)\r\n\t\t{\r\n\t\t\tNSLog(@\"%@ completed!\", request);\r\n\t\t\tdeleteFile = nil;\r\n\t\t}\t\r\n\t}\r\n\r\n#### Request Failed\r\n\r\n\t-(void) requestFailed:(BRRequest *) request\r\n\t{\r\n\t\t//----- handle Create Directory\r\n\t\tif (request == createDir)\r\n\t\t{\r\n\t\t\tNSLog(@\"%@\", request.error.message);\r\n\t\t\t\r\n\t\t\tcreateDir = nil;\r\n\t\t}\r\n\t\t\r\n\t\t//----- handle Delete Directory\r\n\t\tif (request == deleteDir)\r\n\t\t{\r\n\t\t\tNSLog(@\"%@\", request.error.message);\r\n\t\t\t\r\n\t\t\tdeleteDir = nil;\r\n\t\t}\r\n\t\t\r\n\t\t//----- handle List Directory\r\n\t\tif (request == listDir)\r\n\t\t{\r\n\t\t\tNSLog(@\"%@\", request.error.message);\r\n\t\t\t\r\n\t\t\tlistDir = nil;\r\n\t\t}\r\n\t\t\r\n\t\t//----- handle Download a File\r\n\t\tif (request == downloadFile)\r\n\t\t{\r\n\t\t\tNSLog(@\"%@\", request.error.message);\r\n\t\t\t\r\n\t\t\tdownloadFile = nil;\r\n\t\t}\r\n\t\t\r\n\t\t//----- handle Upload a File\r\n\t\tif (request == uploadFile)\r\n\t\t{\r\n\t\t\tNSLog(@\"%@\", request.error.message);\r\n\t\t\t\r\n\t\t\tuploadFile = nil;\r\n\t\t}\r\n\t\t\r\n\t\t//----- handle Delete a File\r\n\t\tif (request == deleteFile)\r\n\t\t{\r\n\t\t\tNSLog(@\"%@\", request.error.message);\r\n\t\t\t\r\n\t\t\tdeleteFile = nil;\r\n\t\t}\r\n\t}\r\n"}